// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  email       String    @unique
  password    String
  posts       Post[]    @relation("UserPosts")
  comments    Comment[]
  createdAt   DateTime  @default(now())
  displayName String?
  bio         String?
  website     String?
  avatarUrl   String?

  notifications     Notification[] @relation("UserNotifications") // inverso de user
  sentNotifications Notification[] @relation("FromUser") // inverso de fromUser
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  author    User      @relation("UserPosts", fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]

  notifications Notification[] // inverso de post
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  createdAt DateTime @default(now())

  user   User @relation("UserNotifications", fields: [userId], references: [id])
  userId Int

  fromUser   User @relation("FromUser", fields: [fromUserId], references: [id])
  fromUserId Int

  post   Post? @relation(fields: [postId], references: [id])
  postId Int?
}
