// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  email       String    @unique
  password    String
  posts       Post[]    @relation("UserPosts")
  createdAt   DateTime  @default(now())
  displayName String?
  bio         String?
  website     String?
  avatarUrl   String?
  comments    Comment[]
  votes       Vote[]
}

model Post {
  id        Int        @id @default(autoincrement())
  content   String
  createdAt DateTime   @default(now())
  author    User       @relation("UserPosts", fields: [authorId], references: [id])
  authorId  Int
  hashtags  Hashtag[]  @relation("PostHashtags")
  comments  Comment[]
  votes    Vote[] 
}

model Hashtag {
  id    Int     @id @default(autoincrement())
  tag   String  @unique
  posts Post[]  @relation("PostHashtags")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
}

model Vote {
  id      Int      @id @default(autoincrement())
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
  post    Post     @relation(fields: [postId], references: [id])
  postId  Int
  type    VoteType
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // evita votos duplicados
}

enum VoteType {
  UP
  DOWN
}

